{"version":3,"sources":["components/Tabs/Tab/TabButton.tsx","components/Tabs/Tab/Tab.tsx","components/Tabs/Tabs.tsx","store/types/articles.ts","store/types/filters.ts","actions/filtersActions.ts","constants/config.ts","actions/articlesActions.ts","containers/TabsContainer/TabsContainer.tsx","data/tabs.ts","components/ArticleList/Article/ArticleLink.tsx","components/ArticleList/Article/Article.tsx","components/Loader/Loader.tsx","components/ArticleList/ArticleList.tsx","selectors/getFilteredArticles.ts","containers/ArticlesContainer/ArticlesContainer.tsx","components/FiltersBar/SearchBar/SearchBar.tsx","components/FiltersBar/FiltersSelectBar/FiltersSelectBar.tsx","components/FiltersBar/SortBar/SortBar.tsx","components/FiltersBar/FiltersBar.tsx","selectors/getFilters.ts","containers/FiltersBarContainer/FiltersBarContainer.tsx","components/ContentView/ContentView.tsx","components/Screen/Screen.tsx","reducers/articlesReducer.ts","reducers/filtersReducer.ts","reducers/index.ts","store/index.ts","components/App/App.tsx","serviceWorker.js","index.js"],"names":["TabButton","styled","div","_templateObject","props","selected","Tab","onTabClick","_this$props","_this","onTabChange","title","_this$props2","this","react_default","a","createElement","Tab_TabButton","onClick","Component","ArticlesActionsTypes","FiltersActionsTypes","SORT_TYPES","TabsContainer","Tabs_templateObject","Tabs","activeTab","tabs","map","tab","Tab_Tab","key","id","config","defaultUrlToImage","defaultErrorMessage","fetchArticles","dispatch","type","FETCH_ARTICLES_REQUEST","payload","fetchArticlesRequest","RESET_FILTERS","page","Math","floor","random","fetch","concat","process","then","res","json","data","articles","FETCH_ARTICLES_REQUEST_SUCCESS","catch","error","FETCH_ARTICLES_REQUEST_FAILURE","connect","state","ArticleLink","attrs","_ref","urlToImage","style","backgroundImage","ArticleLink_templateObject","ArticleContent","Article_templateObject","ArticleTitle","h1","_templateObject2","ArticleDescription","_templateObject3","Article","description","url","Article_ArticleLink","href","RotatePlane","keyframes","Loader_templateObject","Spinner","Loader_templateObject2","Loader","Error","ArticleList_templateObject","HighLight","b","ArticleList_templateObject2","ArticleList","isFetching","components_Loader_Loader","Fragment","article","ArticleList_Article_Article","createSelector","filters","search","sourceFilters","sort","searchQuery","length","newArticles","filter","includes","source","name","formattedQuery","toLowerCase","firstArticle","secondArticle","localeCompare","ASC","DESC","reverse","getFilteredArticles","ArticlesList","SeachBar","value","onSearchBarValueChange","index_es","label","margin","variant","onChange","fullWidth","FiltersSelectBar","selectedSourceFilters","onFiltersSelectBarChange","FormControl_default","InputLabel_default","htmlFor","Select_default","multiple","input","Input_default","MenuItem_default","BottomNavigation","SortBar_templateObject","SortButton","SortBar_templateObject2","SortBar","changeSort","FiltersContainer","FiltersBar_templateObject","FilteredButton","withStyles","root","background","border","color","height","&:hover","Button","FiltersBar","isVisible","event","setSearchQuery","target","setSourceFilters","onSortBarValueChange","sortValue","currentTarget","textContent","setSort","onButtonVisibleClick","setState","FiltersBar_FiltersSelectBar_FiltersSelectBar","SearchBar","FiltersBar_SortBar_SortBar","sources","Object","toConsumableArray","Set","getFilters","query","SET_SEARCH_QUERY","SET_SOURCE_FILTERS","SET_SORT","FiltersBarView","ContentView_templateObject","ArticlesView","ContentView_templateObject2","ContentView","FiltersBarContainer","ArticlesContainer","Screen","TabsContainer_TabsContainer","components_ContentView_ContentView","initialState","articlesReducer","arguments","undefined","action","objectSpread","filtersReducer","rootReducer","combineReducers","middlewares","thunk","store","createStore","applyMiddleware","apply","GlobalStyle","createGlobalStyle","App_templateObject","App","es","components_Screen_Screen","Boolean","window","location","hostname","match","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e2ba1375.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport interface TabButtonProps {\r\n    selected: boolean;\r\n}\r\n\r\nconst TabButton = styled.div`\r\n    cursor: pointer;\r\n    width: 25%;\r\n    background: ${ ((props: TabButtonProps) => props.selected ? '#491253' : 'black')};\r\n    color: white;\r\n    font-family: fantasy;\r\n    font-size: 20px;\r\n    transition: all ease .1s;\r\n    user-select: none;\r\n    text-align: center;\r\n    padding: 15px;\r\n\r\n    &:hover {\r\n        background: #491253;\r\n        border: 0px;\r\n    }\r\n\r\n    @media(max-width: 750px) {\r\n        width: 50%;\r\n    }\r\n    \r\n    @media(max-width: 520px) {\r\n        width: 100%;\r\n    }\r\n`;\r\n\r\nexport default TabButton;","import React, { Component, ReactNode } from 'react';\r\nimport TabButton from './TabButton';\r\n\r\nexport interface TabPropTypes {\r\n    title: string;\r\n    onTabChange: (tabId: string) => void,\r\n    selected: boolean;\r\n}\r\n\r\nexport default class Tab extends Component<TabPropTypes> {\r\n    private onTabClick = (): void => {\r\n        const { selected, onTabChange, title } = this.props;\r\n\r\n        if (!selected) {\r\n            onTabChange(title);\r\n        }\r\n    }\r\n\r\n    public render(): ReactNode {\r\n        const { title, selected } = this.props;\r\n\r\n        return (\r\n            <TabButton selected={selected} onClick={this.onTabClick}>\r\n                {title}\r\n            </TabButton>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Tab from './Tab';\r\nimport { TabInterface } from '../../data/tabs';\r\n\r\nexport interface ITabProps {\r\n    tabs: TabInterface[];\r\n    activeTab: string;\r\n    onTabChange: (tab: string) => void;\r\n}\r\n\r\nconst TabsContainer = styled.div`\r\n    position: fixed;\r\n    display: inline-flex;\r\n    flex-wrap: wrap;\r\n    width: 100%;\r\n    z-index: 1000;\r\n    box-shadow: 0 0 10px black;\r\n`;\r\n\r\nconst Tabs = (props: ITabProps) => {\r\n    const { activeTab, tabs, onTabChange } = props;\r\n    \r\n    return (\r\n        <TabsContainer>\r\n           {tabs.map(tab => (\r\n                <Tab\r\n                    key={tab.id}\r\n                    title={tab.title}\r\n                    onTabChange={onTabChange}\r\n                    selected={activeTab === tab.title}\r\n                />\r\n            ))} \r\n        </TabsContainer>\r\n    );\r\n}\r\n\r\nexport default Tabs;","export enum ArticlesActionsTypes {\r\n    FETCH_ARTICLES_REQUEST = '@@articles/FETCH_ARTICLES_REQUEST',\r\n    FETCH_ARTICLES_REQUEST_SUCCESS = '@@articles/FETCH_ARTICLES_REQUEST_SUCCESS',\r\n    FETCH_ARTICLES_REQUEST_FAILURE = '@@articles/FETCH_ARTICLES_REQUEST_FAILURE',\r\n};\r\n\r\nexport interface IArticle {\r\n    title: string;\r\n    description: string;\r\n    url: string;\r\n    urlToImage: string;\r\n    source: {\r\n        name: string;\r\n    }\r\n}\r\n\r\nexport interface IArticlesState {\r\n    activeTab: string;\r\n    data: IArticle[];\r\n    isFetching: boolean;\r\n    error: string;\r\n}\r\n\r\nexport interface IFetchArticlesRequestAction {\r\n    type: ArticlesActionsTypes.FETCH_ARTICLES_REQUEST;\r\n    payload: string;\r\n}\r\n\r\nexport interface IFetchArticlesRequestSuccessAction {\r\n    type: ArticlesActionsTypes.FETCH_ARTICLES_REQUEST_SUCCESS;\r\n    payload: IArticle[],\r\n}\r\n\r\nexport interface IFetchArticlesRequestFailureAction {\r\n    type: ArticlesActionsTypes.FETCH_ARTICLES_REQUEST_FAILURE;\r\n    payload: string;\r\n}\r\n\r\nexport type ArticleActions = IFetchArticlesRequestAction | IFetchArticlesRequestFailureAction | IFetchArticlesRequestSuccessAction;","export enum FiltersActionsTypes {\r\n    SET_SOURCE_FILTERS = '@@filters/SET_SOURCE_FILTERS',\r\n    SET_SEARCH_QUERY = '@@filters/SET_SEARCH_QUERY',\r\n    SET_SORT = '@@filters/SET_SORT',\r\n    RESET_FILTERS = '@@filters/RESET_FILTERS',\r\n};\r\n\r\nexport enum SORT_TYPES {\r\n    ASC = 'ASC',\r\n    DESC = 'DESC',\r\n}\r\n\r\nexport interface IFiltersState {\r\n    sort: string;\r\n    sourceFilters: string[]\r\n    search: string;\r\n}\r\n\r\nexport interface SetSourceFiltersAction {\r\n    type: FiltersActionsTypes.SET_SOURCE_FILTERS;\r\n    payload: string[];\r\n}\r\n\r\nexport interface SetSearchQueryAction {\r\n    type: FiltersActionsTypes.SET_SEARCH_QUERY;\r\n    payload: string;\r\n}\r\n\r\nexport interface SetSortAction {\r\n    type: FiltersActionsTypes.SET_SORT;\r\n    payload: string;\r\n}\r\n\r\nexport interface ResetFiltersAction {\r\n    type: FiltersActionsTypes.RESET_FILTERS;\r\n}\r\n\r\nexport type FilterActions = SetSourceFiltersAction | SetSearchQueryAction | SetSortAction | ResetFiltersAction;","import { \r\n    SetSearchQueryAction,\r\n    FiltersActionsTypes,\r\n    SetSourceFiltersAction,\r\n    SetSortAction,\r\n    ResetFiltersAction\r\n} from '../store/types/filters';\r\n\r\nexport const setSearchQuery = (query: string): SetSearchQueryAction => ({\r\n    type: FiltersActionsTypes.SET_SEARCH_QUERY,\r\n    payload: query,\r\n});\r\n\r\nexport const setFilters = (filters: string[]): SetSourceFiltersAction => ({\r\n    type: FiltersActionsTypes.SET_SOURCE_FILTERS,\r\n    payload: filters,\r\n});\r\n\r\nexport const setSort = (sort: string): SetSortAction => ({\r\n    type: FiltersActionsTypes.SET_SORT,\r\n    payload: sort,\r\n});\r\n\r\nexport const resetFilters = (): ResetFiltersAction => ({\r\n    type: FiltersActionsTypes.RESET_FILTERS,\r\n});","interface Config {\r\n    defaultUrlToImage: string;\r\n    defaultErrorMessage: string;\r\n}\r\n\r\nconst config: Config = {\r\n    defaultUrlToImage: 'https://upload.wikimedia.org/wikipedia/commons/thumb/a/ac/No_image_available.svg/1024px-No_image_available.svg.png',\r\n    defaultErrorMessage: 'Error while fetching data. Please try again!',\r\n};\r\n\r\nexport default config;","import { ThunkAction } from 'redux-thunk';\r\nimport { RootState } from '../reducers'; \r\nimport { \r\n    ArticleActions,\r\n    ArticlesActionsTypes,\r\n    IFetchArticlesRequestAction,\r\n    IFetchArticlesRequestSuccessAction,\r\n    IArticle,\r\n    IFetchArticlesRequestFailureAction,\r\n} from '../store/types/articles';\r\nimport { FilterActions } from '../store/types/filters';\r\nimport { resetFilters } from './filtersActions';\r\nimport config from '../constants/config';\r\n\r\nexport interface IFetchArticlesResponse {\r\n    articles: IArticle[];\r\n}\r\n\r\nexport const fetchArticlesRequest = (tab: string): IFetchArticlesRequestAction => ({\r\n    type: ArticlesActionsTypes.FETCH_ARTICLES_REQUEST,\r\n    payload: tab,\r\n});\r\n\r\nexport const fetchArticlesRequestSuccess = (articles: IArticle[]): IFetchArticlesRequestSuccessAction => ({\r\n    type: ArticlesActionsTypes.FETCH_ARTICLES_REQUEST_SUCCESS,\r\n    payload: articles,\r\n});\r\n\r\nexport const fetchArticlesRequestFailure = (error: string): IFetchArticlesRequestFailureAction => ({\r\n    type: ArticlesActionsTypes.FETCH_ARTICLES_REQUEST_FAILURE,\r\n    payload: error,\r\n});\r\n\r\nexport const fetchArticles = (tab: string): ThunkAction<void, RootState, void, ArticleActions | FilterActions> => {\r\n    return (dispatch) => {\r\n        dispatch(fetchArticlesRequest(tab));\r\n        dispatch(resetFilters());\r\n\r\n        const page = Math.floor((Math.random() * 50) + 1);\r\n        const apiKey: string | undefined = process.env.REACT_APP_API_KEY;\r\n        const apiSource: string | undefined = process.env.REACT_APP_API_URL;\r\n\r\n        fetch(`${apiSource}?page=${page}&apiKey=${apiKey}&q=${tab}`).then(res => res.json())\r\n            .then((data: IFetchArticlesResponse) => {\r\n                dispatch(fetchArticlesRequestSuccess(data.articles));\r\n            })\r\n            .catch(() => {\r\n                dispatch(fetchArticlesRequestFailure(config.defaultErrorMessage));\r\n            });\r\n    }\r\n}","import { connect } from 'react-redux';\r\nimport Tabs from '../../components/Tabs';\r\nimport { RootState } from '../../reducers';\r\nimport { fetchArticles } from '../../actions/articlesActions';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport { ArticleActions } from '../../store/types/articles';\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    activeTab: state.articles.activeTab,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: ThunkDispatch<RootState, undefined, ArticleActions>) => ({\r\n    onTabChange: (tab: string) => dispatch(fetchArticles(tab)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Tabs);","export interface TabInterface {\r\n    id: string;\r\n    title: string;\r\n}\r\n\r\nconst tabs: TabInterface[] = [\r\n    {\r\n        id: '0',\r\n        title: 'World',\r\n    },\r\n    {\r\n        id: '1',\r\n        title: 'People',\r\n    },\r\n    {\r\n        id: '2',\r\n        title: 'Sport',\r\n    },\r\n    {\r\n        id: '3',\r\n        title: 'Games',\r\n    },\r\n];\r\n\r\nexport default tabs;","import styled from 'styled-components';\r\n\r\nexport interface ArticleLinkProps{\r\n    urlToImage: string;\r\n}\r\n\r\nconst ArticleLink = styled.a.attrs<ArticleLinkProps, any>(({ urlToImage }: ArticleLinkProps) => ({\r\n    style: {\r\n        backgroundImage: `url(${urlToImage})`,\r\n    },\r\n}))`\r\n    width: 100%;\r\n    color: white;\r\n    cursor: pointer;\r\n    background-position: center;\r\n    background-size: cover;\r\n    background-repeat: no-repeat;\r\n    text-decoration: none;\r\n`;\r\n\r\nexport default ArticleLink;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport ArticleLink from './ArticleLink';\r\n\r\nconst ArticleContent = styled.div`\r\n    background-color: rgba(0, 0, 0, 0.7);\r\n    min-height: 200px;\r\n    padding: 30px;\r\n    transition: all ease .2s;\r\n\r\n    &:hover {\r\n        background-color: rgba(0,0,0,0.5);\r\n    }\r\n`;\r\n\r\nconst ArticleTitle = styled.h1`\r\n    margin: 0px;\r\n`;\r\n\r\nconst ArticleDescription = styled.div`\r\n    margin: 0px;\r\n`;\r\n\r\nexport interface ArticleProps {\r\n    title: string;\r\n    urlToImage: string;\r\n    description: string;\r\n    url: string;\r\n}\r\n\r\nconst Article: React.SFC<ArticleProps> = props => {\r\n    const { title, urlToImage, description, url } = props;\r\n\r\n    return (\r\n        <ArticleLink urlToImage={urlToImage} href={url}>\r\n            <ArticleContent>\r\n                <ArticleTitle>{title}</ArticleTitle>\r\n                <ArticleDescription>{description}</ArticleDescription>\r\n            </ArticleContent>\r\n        </ArticleLink>\r\n    );\r\n}\r\n\r\nexport default Article;","import React from 'react';\r\nimport styled, { keyframes } from 'styled-components';\r\n\r\nconst RotatePlane = keyframes`\r\n    0% { \r\n        transform: perspective(120px) rotateX(0deg) rotateY(0deg);\r\n        -webkit-transform: perspective(120px) rotateX(0deg) rotateY(0deg) \r\n    } 50% { \r\n        transform: perspective(120px) rotateX(-180.1deg) rotateY(0deg);\r\n        -webkit-transform: perspective(120px) rotateX(-180.1deg) rotateY(0deg) \r\n    } 100% { \r\n        transform: perspective(120px) rotateX(-180deg) rotateY(-179.9deg);\r\n        -webkit-transform: perspective(120px) rotateX(-180deg) rotateY(-179.9deg);\r\n    }\r\n`;\r\n\r\nconst Spinner = styled.div`\r\n    width: 40px;\r\n    height: 40px;\r\n    background-color: black;\r\n    margin: 100px auto;\r\n    -webkit-animation: ${RotatePlane} 1.2s infinite ease-in-out;\r\n    animation: ${RotatePlane} 1.2s infinite ease-in-out;\r\n`;\r\n\r\nconst Loader: React.SFC<{}> = () => {\r\n    return <Spinner></Spinner>\r\n}\r\n\r\nexport default Loader;","import React, { ReactNode } from 'react';\r\nimport styled from 'styled-components';\r\nimport Article from './Article';\r\nimport Loader from '../Loader';\r\nimport config from '../../constants/config';\r\nimport { IArticle } from '../../store/types/articles';\r\n\r\nexport interface ArticleListPropTypes {\r\n    articles: IArticle[];\r\n    error: string;\r\n    isFetching: boolean;\r\n    activeTab: string;\r\n}\r\n\r\nconst Error = styled.div`\r\n    color: red;\r\n`;\r\n\r\nconst HighLight = styled.b`\r\n    color: #491253;\r\n`;\r\n\r\nconst ArticleList = ({ articles, isFetching, error, activeTab }: ArticleListPropTypes) => {\r\n    if (isFetching) {\r\n        return <Loader />\r\n    }\r\n\r\n    if (error) {\r\n        <Error>{error}</Error>\r\n    }\r\n\r\n    if (!activeTab) {\r\n        return (\r\n            <div>\r\n                Please, select any Tab to display <HighLight>20</HighLight> random articles of chosen category\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {articles.map((article: IArticle): ReactNode => ( \r\n                <Article\r\n                    key={article.title}\r\n                    title={article.title} \r\n                    description={article.description}\r\n                    url={article.url}\r\n                    urlToImage={article.urlToImage || config.defaultUrlToImage}\r\n                />\r\n            ))}\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default ArticleList;","import { createSelector } from 'reselect';\r\nimport { RootState } from \"../reducers\";\r\nimport { SORT_TYPES } from '../store/types/filters';\r\n\r\nexport const searchQuerySelector = (state: RootState) => state.filters.search;\r\nexport const sourceFiltersSelector = (state: RootState) => state.filters.sourceFilters;\r\nexport const sortSelector = (state: RootState) => state.filters.sort;\r\nexport const articlesSelector = (state: RootState) => state.articles.data;\r\n\r\nexport default createSelector(\r\n    [searchQuerySelector, sourceFiltersSelector, sortSelector, articlesSelector],\r\n    (searchQuery, sourceFilters, sort, articles) => {\r\n        if (!articles.length) {\r\n            return articles;\r\n        }\r\n\r\n        let newArticles = articles;\r\n\r\n        if (sourceFilters.length) {\r\n            newArticles = newArticles.filter(article => {\r\n                return sourceFilters.includes(article.source.name);\r\n            });\r\n        }\r\n\r\n        if (searchQuery) {\r\n            const formattedQuery = searchQuery.toLowerCase();\r\n\r\n            newArticles = newArticles.filter((article) => {\r\n                return article.title.toLowerCase().includes(formattedQuery) ||\r\n                    article.description.toLowerCase().includes(formattedQuery)\r\n            });\r\n        }\r\n\r\n        if (!sort) {\r\n            return newArticles;\r\n        }\r\n    \r\n        newArticles = newArticles.sort((firstArticle, secondArticle) => {\r\n            return firstArticle.title.localeCompare(secondArticle.title);\r\n        });\r\n\r\n        if (sort === SORT_TYPES.ASC) {\r\n            return newArticles;\r\n        } else if (sort === SORT_TYPES.DESC) {\r\n            return newArticles.reverse();\r\n        } else {\r\n            return newArticles;\r\n        }\r\n    }\r\n);","import { connect } from 'react-redux';\r\nimport ArticlesList from '../../components/ArticleList';\r\nimport { RootState } from '../../reducers';\r\nimport getFilteredArticles from '../../selectors/getFilteredArticles';\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    articles: getFilteredArticles(state),\r\n    isFetching: state.articles.isFetching,\r\n    error: state.articles.error,\r\n    activeTab: state.articles.activeTab,\r\n});\r\n\r\nexport default connect(mapStateToProps)(ArticlesList);","import React, { ChangeEvent } from 'react';\r\nimport { TextField } from '@material-ui/core';\r\n\r\ninterface ISearchBarProps {\r\n    value: string;\r\n    onSearchBarValueChange: (event: ChangeEvent<HTMLInputElement>) => void;\r\n}\r\n\r\nconst SeachBar = ({ value, onSearchBarValueChange }: ISearchBarProps) => (\r\n    <TextField\r\n        label=\"Search\"\r\n        type=\"search\"\r\n        margin=\"normal\"\r\n        variant=\"outlined\"\r\n        value={value}\r\n        onChange={onSearchBarValueChange}\r\n        fullWidth\r\n    />\r\n);\r\n\r\nexport default SeachBar;","import React, { ChangeEvent } from 'react';\r\nimport Input from '@material-ui/core/Input';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nexport interface IFiltersSelectBar {\r\n    sourceFilters: string[],\r\n    selectedSourceFilters: string[],\r\n    onFiltersSelectBarChange: (event: ChangeEvent<HTMLSelectElement>) => void;\r\n}\r\n\r\nconst FiltersSelectBar = ({ sourceFilters, selectedSourceFilters, onFiltersSelectBarChange }: IFiltersSelectBar) => {\r\n    return (\r\n        <FormControl fullWidth>\r\n            <InputLabel htmlFor=\"filters\">Filters</InputLabel>\r\n            <Select\r\n                    multiple\r\n                    value={selectedSourceFilters}\r\n                    onChange={onFiltersSelectBarChange}\r\n                    input={<Input id=\"filters\" />}\r\n            >\r\n                {sourceFilters.map(source => (\r\n                    <MenuItem key={source} value={source} >\r\n                        {source}\r\n                    </MenuItem>\r\n                ))}\r\n            </Select>\r\n        </FormControl>\r\n    );\r\n}\r\n\r\nexport default FiltersSelectBar;","import React, { MouseEvent } from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface ISortButtonProps {\r\n    selected: boolean;\r\n}\r\n\r\nconst BottomNavigation = styled.div`\r\n    display: flex;\r\n`;\r\n\r\nconst SortButton = styled.div<ISortButtonProps>`\r\n    width: 50%;\r\n    margin: 10px;\r\n    background: ${ props => props.selected ? '#491253' : 'black'};\r\n    border-radius: 20px;\r\n    color: white;\r\n    box-shadow: 0 0 10px black;\r\n    cursor: pointer;\r\n    user-select: none;\r\n\r\n    &:hover {\r\n        background: ${ props => props.selected ? '#712d7d' : 'green'};\r\n    }\r\n`\r\n\r\ninterface ISortBarProps {\r\n    value: string;\r\n    changeSort: (event: MouseEvent) => void;\r\n}\r\n\r\nconst SortBar = ({ value, changeSort }: ISortBarProps) => (\r\n    <BottomNavigation>\r\n        <SortButton selected={value === 'Asc'} onClick={changeSort}>\r\n            Asc\r\n        </SortButton>\r\n        <SortButton selected={value === 'Desc'} onClick={changeSort}>\r\n            Desc\r\n        </SortButton>\r\n    </BottomNavigation>\r\n);\r\n\r\nexport default SortBar;","import React, { Component, ReactNode, MouseEvent, ChangeEvent } from 'react';\r\nimport styled from 'styled-components';\r\nimport SeachBar from './SearchBar';\r\nimport FiltersSelectBar from './FiltersSelectBar/FiltersSelectBar';\r\nimport SortBar from './SortBar';\r\nimport { Button, withStyles } from '@material-ui/core';\r\n\r\nconst FiltersContainer = styled.div`\r\n    margin: 10px;\r\n    padding: 20px;\r\n    border: 1px solid black;\r\n    box-shadow: 0 0 10px black;\r\n    border-radius: 10px;\r\n`;\r\n\r\nconst FilteredButton = withStyles({\r\n    root: {\r\n        background: '#491253',\r\n        border: 0,\r\n        color: 'white',\r\n        height: 48,\r\n        '&:hover': {\r\n            background: '#712d7d',\r\n        }\r\n    },\r\n})(Button);\r\n\r\nexport interface IFiltersBarProps {\r\n    searchQuery: string;\r\n    sourceFilters: string[];\r\n    selectedSourceFilters: string[];\r\n    sort: string;\r\n    setSearchQuery: (query: string) => void;\r\n    setSourceFilters: (sourceFilters: string[]) => void;\r\n    setSort: (sort: string) => void;\r\n}\r\n\r\nexport interface IFiltersBarState {\r\n    isVisible: boolean;\r\n}\r\n\r\nclass FiltersBar extends Component<IFiltersBarProps, IFiltersBarState> {\r\n    state = {\r\n        isVisible: false,\r\n    }\r\n\r\n    onSearchBarValueChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        this.props.setSearchQuery(event.target.value);\r\n    }\r\n\r\n    onFiltersSelectBarChange = (event: ChangeEvent<HTMLSelectElement>) => {\r\n        //Workaround to issue https://github.com/mui-org/material-ui/issues/13782\r\n        this.props.setSourceFilters(event.target.value as any);\r\n    }\r\n\r\n    onSortBarValueChange = (event: MouseEvent) => {\r\n        const sortValue = event.currentTarget.textContent || 'Asc';\r\n        \r\n        this.props.setSort(sortValue === this.props.sort ? '' : sortValue);\r\n    }\r\n\r\n    onButtonVisibleClick = () => {\r\n        this.setState((state) => ({\r\n            isVisible: !state.isVisible,\r\n        }));\r\n    }\r\n\r\n    render(): ReactNode {\r\n        const { searchQuery, selectedSourceFilters, sourceFilters, sort } = this.props;\r\n\r\n        return (\r\n            <React.Fragment>\r\n                {this.state.isVisible && (\r\n                    <FiltersContainer>\r\n                        <FiltersSelectBar\r\n                            onFiltersSelectBarChange={this.onFiltersSelectBarChange}\r\n                            selectedSourceFilters={selectedSourceFilters}\r\n                            sourceFilters={sourceFilters} \r\n                        />\r\n                        <SeachBar\r\n                            value={searchQuery}\r\n                            onSearchBarValueChange={this.onSearchBarValueChange} \r\n                        />\r\n                        <SortBar \r\n                            value={sort}\r\n                            changeSort={this.onSortBarValueChange} \r\n                        />\r\n                    </FiltersContainer>\r\n                )}\r\n                <FilteredButton onClick={this.onButtonVisibleClick}>\r\n                    {this.state.isVisible ? 'Hide filters' : 'Show filters'}\r\n                </FilteredButton>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FiltersBar;","import { createSelector } from 'reselect';\r\nimport { RootState } from \"../reducers\";\r\nimport { IArticle } from '../store/types/articles';\r\n\r\nconst articlesSelector = (state: RootState) => state.articles.data;\r\n\r\nexport default createSelector(\r\n    articlesSelector,\r\n    (articles: IArticle[]): string[] => {\r\n        const sources = articles.map(article => article.source.name);\r\n\r\n        return [...new Set(sources)];\r\n    }\r\n);","import { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport FiltersBar from '../../components/FiltersBar';\r\nimport { RootState } from '../../reducers';\r\nimport { setSearchQuery, setFilters, setSort } from '../../actions/filtersActions';\r\nimport getFilters from '../../selectors/getFilters';\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    searchQuery: state.filters.search,\r\n    selectedSourceFilters: state.filters.sourceFilters,\r\n    sort: state.filters.sort,\r\n    sourceFilters: getFilters(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    setSearchQuery: (query: string) => dispatch(setSearchQuery(query)),\r\n    setSourceFilters: (sourceFilters: string[]) => dispatch(setFilters(sourceFilters)),\r\n    setSort: (sort: string) => dispatch(setSort(sort)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FiltersBar);","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport ArticlesContainer from '../../containers/ArticlesContainer';\r\nimport FiltersBarContainer from '../../containers/FiltersBarContainer';\r\n\r\nconst FiltersBarView = styled.div`\r\n    margin-left: 200px;\r\n    margin-right: 200px;\r\n    padding-top: 54px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    text-align: center;\r\n    @media(max-width: 1020px) {\r\n        margin-left: 100px;\r\n        margin-right: 100px;\r\n    }\r\n    \r\n    @media(max-width: 750px) {\r\n        margin-left: 50px;\r\n        margin-right: 50px;\r\n        padding-top: 108px;\r\n    }\r\n    \r\n    @media(max-width: 520px) {\r\n        margin: 0px;\r\n        padding-top: 216px;\r\n    }\r\n`;\r\n\r\nconst ArticlesView = styled.div`\r\n    margin-left: 200px;\r\n    margin-right: 200px;\r\n    box-shadow: 0 0 20px black;\r\n    min-height: 400px;\r\n    text-align: center;\r\n    margin-bottom: 20px;\r\n\r\n    @media(max-width: 1020px) {\r\n        margin-left: 100px;\r\n        margin-right: 100px;\r\n    }\r\n    \r\n    @media(max-width: 750px) {\r\n        margin-left: 50px;\r\n        margin-right: 50px;\r\n    }\r\n    \r\n    @media(max-width: 520px) {\r\n        margin: 0px;\r\n    }\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n`;\r\n\r\nconst ContentView = () => (\r\n    <React.Fragment>\r\n        <FiltersBarView>\r\n            <FiltersBarContainer />\r\n        </FiltersBarView>\r\n        <ArticlesView>\r\n            <ArticlesContainer />\r\n        </ArticlesView>\r\n    </React.Fragment>\r\n);\r\n\r\nexport default ContentView;","import React from 'react';\r\nimport ArticlesContainer from '../../containers/ArticlesContainer/ArticlesContainer';\r\nimport TabsContainer from '../../containers/TabsContainer/TabsContainer';\r\nimport tabs from '../../data/tabs';\r\nimport FiltersBarContainer from '../../containers/FiltersBarContainer';\r\nimport ContentView from '../ContentView';\r\n\r\nconst Screen = () => (\r\n    <React.Fragment>\r\n        <TabsContainer tabs={tabs} />\r\n        <ContentView />\r\n    </React.Fragment>\r\n);\r\n\r\nexport default Screen;","import { ArticlesActionsTypes, IArticlesState, ArticleActions } from '../store/types/articles';\r\n\r\nconst initialState = {\r\n    data: [],\r\n    activeTab: '',\r\n    error: '',\r\n    isFetching: false,\r\n};\r\n\r\nconst articlesReducer = (state: IArticlesState = initialState, action: ArticleActions): IArticlesState => {\r\n    switch (action.type) {\r\n        case ArticlesActionsTypes.FETCH_ARTICLES_REQUEST:\r\n            return { ...state, activeTab: action.payload, isFetching: true, error: '' };\r\n\r\n        case ArticlesActionsTypes.FETCH_ARTICLES_REQUEST_SUCCESS:\r\n            return { ...state, data: action.payload, isFetching: false };\r\n\r\n        case ArticlesActionsTypes.FETCH_ARTICLES_REQUEST_FAILURE:\r\n            return { ...state, isFetching: false, error: action.payload };\r\n\r\n        default: \r\n            return state;\r\n    }\r\n}\r\n\r\nexport default articlesReducer;","import { IFiltersState, FilterActions, FiltersActionsTypes } from \"../store/types/filters\";\r\n\r\nconst initialState = {\r\n    sort: '',\r\n    search: '',\r\n    sourceFilters: [],\r\n}\r\n\r\nconst filtersReducer = (state: IFiltersState = initialState, action: FilterActions): IFiltersState => {\r\n    switch (action.type) {\r\n        case FiltersActionsTypes.SET_SOURCE_FILTERS:\r\n            return { ...state, sourceFilters: action.payload };\r\n\r\n        case FiltersActionsTypes.SET_SEARCH_QUERY:\r\n            return { ...state, search: action.payload };\r\n        \r\n        case FiltersActionsTypes.SET_SORT:\r\n            return { ...state, sort: action.payload };\r\n        \r\n        case FiltersActionsTypes.RESET_FILTERS:\r\n            return initialState;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default filtersReducer;","import { combineReducers } from 'redux';\r\nimport articlesReducer from './articlesReducer';\r\nimport filtersReducer from './filtersReducer';\r\nimport { IArticlesState } from '../store/types/articles';\r\nimport { IFiltersState } from '../store/types/filters';\r\n\r\nexport interface RootState {\r\n    articles: IArticlesState;\r\n    filters: IFiltersState;\r\n}\r\n\r\nconst rootReducer = combineReducers<RootState>({\r\n    articles: articlesReducer,\r\n    filters: filtersReducer,\r\n});\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware, Middleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport logger from 'redux-logger';\r\nimport rootReducer from '../reducers';\r\n\r\nconst middlewares: Middleware[] = [thunk];\r\n\r\nif (process.env.NODE_ENV === 'development') {\r\n    middlewares.push(logger);\r\n}\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(...middlewares));\r\n\r\nexport default store;","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { createGlobalStyle } from 'styled-components';\r\nimport Screen from '../Screen';\r\nimport store from '../../store';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n    * {\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    html {\r\n        height: 100%;\r\n    }\r\n\r\n    body {\r\n        min-height: 100%;\r\n        margin: 0px;\r\n        display: flex;\r\n        flex-direction: column;\r\n        flex-wrap: nowrap;\r\n        justify-content: flex-start;\r\n        align-items: center;\r\n        font-family: fantasy;\r\n    }\r\n\r\n    #root {\r\n        width: 100%;\r\n    }\r\n`;\r\n\r\nconst App: React.SFC<{}> = () => {\r\n    return (\r\n        <Provider store={store} >\r\n            <GlobalStyle />\r\n            <Screen />\r\n        </Provider>\r\n    );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}