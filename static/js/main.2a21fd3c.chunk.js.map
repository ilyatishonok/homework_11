{"version":3,"sources":["components/Tabs/Tab/TabButton.tsx","components/Tabs/Tab/Tab.tsx","components/Tabs/Tabs.tsx","store/types/articles.ts","store/types/filters.ts","actions/filtersActions.ts","actions/articlesActions.ts","containers/TabsContainer/TabsContainer.tsx","data/tabs.ts","components/ArticleList/Article/ArticleLink.tsx","components/ArticleList/Article/Article.tsx","components/Loader/Loader.tsx","constants/config.ts","components/FiltersBar/SearchBar/SearchBar.tsx","components/FiltersBar/FiltersSelectBar/FiltersSelectBar.tsx","components/FiltersBar/SortBar/SortBar.tsx","components/FiltersBar/FiltersBar.tsx","selectors/getFilters.ts","containers/FiltersBarContainer/FiltersBarContainer.tsx","components/ArticleList/ArticleList.tsx","selectors/getFilteredArticles.ts","containers/ArticlesContainer/ArticlesContainer.tsx","components/ContentView/ContentView.tsx","components/Screen/Screen.tsx","reducers/articlesReducer.ts","reducers/filtersReducer.ts","reducers/index.ts","store/index.ts","components/App/App.tsx","serviceWorker.js","index.js"],"names":["TabButton","styled","div","_templateObject","props","selected","Tab","onTabClick","_this$props","_this","onTabChange","title","_this$props2","this","react_default","a","createElement","Tab_TabButton","onClick","Component","ArticlesActionsTypes","FiltersActionsTypes","TabsContainer","Tabs_templateObject","Tabs","activeTab","tabs","map","tab","Tab_Tab","key","id","fetchArticles","dispatch","getState","type","FETCH_ARTICLES_REQUEST","payload","fetchArticlesRequest","RESET_FILTERS","page","Math","floor","random","fetch","concat","process","then","res","json","data","articles","FETCH_ARTICLES_REQUEST_SUCCESS","catch","error","FETCH_ARTICLES_REQUEST_FAILED","connect","state","ArticleLink","attrs","_ref","urlToImage","style","backgroundImage","ArticleLink_templateObject","ArticleContent","Article_templateObject","ArticleTitle","h1","_templateObject2","ArticleDescription","_templateObject3","Article","description","url","Article_ArticleLink","href","RotatePlane","keyframes","Loader_templateObject","Spinner","Loader_templateObject2","Loader","config","defaultUrlToImage","defaultErrorMessage","SeachBar","value","onSearchBarValueChange","index_es","label","margin","variant","onChange","fullWidth","FiltersSelectBar","sources","values","onFiltersSelectBarChange","FormControl_default","InputLabel_default","htmlFor","Select_default","multiple","input","Input_default","source","MenuItem_default","BottomNavigation","SortBar_templateObject","SortButton","SortBar_templateObject2","SortBar","changeSort","Container","FiltersBar_templateObject","FiltersBar","isVisible","event","setSearchQuery","target","setFilters","onSortBarValueChange","sortValue","currentTarget","textContent","setSort","sort","onButtonVisibleClick","setState","searchQuery","filterValues","filters","Fragment","FiltersBar_FiltersSelectBar_FiltersSelectBar","SearchBar","FiltersBar_SortBar_SortBar","createSelector","article","name","Object","toConsumableArray","Set","search","getFilters","query","SET_SEARCH_QUERY","SET_FILTERS","SET_SORT","Error","ArticleList_templateObject","HighLight","b","ArticleList_templateObject2","ArticleList","isFetching","components_Loader_Loader","FiltersBarContainer","ArticleList_Article_Article","renderContent","getFilteredArticles","length","filter","includes","sortedArray","firstArticle","secondArticle","localeCompare","reverse","ArticlesList","ContentLayout","ContentView_templateObject","ContentView","ArticlesContainer","Screen","TabsContainer_TabsContainer","components_ContentView_ContentView","initialState","articlesReducer","arguments","undefined","action","objectSpread","filtersReducer","rootReducer","combineReducers","middlewares","thunk","store","createStore","applyMiddleware","apply","GlobalStyle","createGlobalStyle","App_templateObject","App","es","components_Screen_Screen","Boolean","window","location","hostname","match","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2a21fd3c.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport interface TabButtonProps {\r\n    selected: boolean;\r\n}\r\n\r\nconst TabButton = styled.div`\r\n    cursor: pointer;\r\n    width: 25%;\r\n    background: ${ ((props: TabButtonProps) => props.selected ? '#491253' : 'black')};\r\n    color: white;\r\n    font-family: fantasy;\r\n    font-size: 20px;\r\n    transition: all ease .1s;\r\n    user-select: none;\r\n    text-align: center;\r\n    padding: 15px;\r\n\r\n    &:hover {\r\n        background: #491253;\r\n        border: 0px;\r\n    }\r\n\r\n    @media(max-width: 750px) {\r\n        width: 50%;\r\n    }\r\n    \r\n    @media(max-width: 520px) {\r\n        width: 100%;\r\n    }\r\n`;\r\n\r\nexport default TabButton;","import React, { Component, ReactNode } from 'react';\r\nimport TabButton from './TabButton';\r\n\r\nexport interface TabPropTypes {\r\n    title: string;\r\n    onTabChange: (tabId: string) => void,\r\n    selected: boolean;\r\n}\r\n\r\nexport default class Tab extends Component<TabPropTypes> {\r\n    private onTabClick = (): void => {\r\n        const { selected, onTabChange, title } = this.props;\r\n\r\n        if (!selected) {\r\n            onTabChange(title);\r\n        }\r\n    }\r\n\r\n    public render(): ReactNode {\r\n        const { title, selected } = this.props;\r\n\r\n        return (\r\n            <TabButton selected={selected} onClick={this.onTabClick}>\r\n                {title}\r\n            </TabButton>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Tab from './Tab';\r\nimport { TabInterface } from '../../data/tabs';\r\n\r\nexport interface ITabProps {\r\n    tabs: TabInterface[];\r\n    activeTab: string;\r\n    onTabChange: (tab: string) => void;\r\n}\r\n\r\nconst TabsContainer = styled.div`\r\n    position: fixed;\r\n    display: inline-flex;\r\n    flex-wrap: wrap;\r\n    width: 100%;\r\n    z-index: 1000;\r\n    box-shadow: 0 0 10px black;\r\n`;\r\n\r\nconst Tabs = (props: ITabProps) => {\r\n    const { activeTab, tabs, onTabChange } = props;\r\n\r\n    return (\r\n        <TabsContainer>\r\n           {tabs.map(tab => (\r\n                <Tab\r\n                    key={tab.id}\r\n                    title={tab.title}\r\n                    onTabChange={onTabChange}\r\n                    selected={activeTab === tab.title}\r\n                />\r\n            ))} \r\n        </TabsContainer>\r\n    );\r\n}\r\n\r\nexport default Tabs;","export enum ArticlesActionsTypes {\r\n    FETCH_ARTICLES_REQUEST = '@@articles/FETCH_ARTICLES_REQUEST',\r\n    FETCH_ARTICLES_REQUEST_SUCCESS = '@@articles/FETCH_ARTICLES_REQUEST_SUCCESS',\r\n    FETCH_ARTICLES_REQUEST_FAILED = '@@articles/FETCH_ARTICLES_REQUEST_FAILED',\r\n};\r\n\r\nexport interface IArticle {\r\n    title: string;\r\n    description: string;\r\n    url: string;\r\n    urlToImage: string;\r\n    source: {\r\n        name: string;\r\n    }\r\n}\r\n\r\nexport interface IArticlesState {\r\n    activeTab: string;\r\n    data: IArticle[];\r\n    isFetching: boolean;\r\n    error: string;\r\n}\r\n\r\nexport interface IFetchArticlesRequestAction {\r\n    type: ArticlesActionsTypes.FETCH_ARTICLES_REQUEST;\r\n    payload: string;\r\n}\r\n\r\nexport interface IFetchArticlesRequestSuccessAction {\r\n    type: ArticlesActionsTypes.FETCH_ARTICLES_REQUEST_SUCCESS;\r\n    payload: IArticle[],\r\n}\r\n\r\nexport interface IFetchArticlesRequestFailedAction {\r\n    type: ArticlesActionsTypes.FETCH_ARTICLES_REQUEST_FAILED;\r\n    payload: string;\r\n}\r\n\r\nexport type ArticleActions = IFetchArticlesRequestAction | IFetchArticlesRequestFailedAction | IFetchArticlesRequestSuccessAction;","export enum FiltersActionsTypes {\r\n    SET_FILTERS = '@@filters/SET_FILTERS',\r\n    SET_SEARCH_QUERY = '@@filters/SET_SEARCH_QUERY',\r\n    SET_SORT = '@@filters/SET_SORT',\r\n    RESET_FILTERS = '@@filters/RESET_FILTERS',\r\n};\r\n\r\nexport interface IFiltersState {\r\n    sort: string;\r\n    filters: string[]\r\n    search: string;\r\n}\r\n\r\nexport interface SetFiltersAction {\r\n    type: FiltersActionsTypes.SET_FILTERS;\r\n    payload: string[];\r\n}\r\n\r\nexport interface SetSearchQueryAction {\r\n    type: FiltersActionsTypes.SET_SEARCH_QUERY;\r\n    payload: string;\r\n}\r\n\r\nexport interface SetSortAction {\r\n    type: FiltersActionsTypes.SET_SORT;\r\n    payload: string;\r\n}\r\n\r\nexport interface ResetFiltersAction {\r\n    type: FiltersActionsTypes.RESET_FILTERS;\r\n}\r\n\r\nexport type FilterActions = SetFiltersAction | SetSearchQueryAction | SetSortAction | ResetFiltersAction;","import { SetSearchQueryAction, FiltersActionsTypes, SetFiltersAction, SetSortAction, ResetFiltersAction } from '../store/types/filters';\r\n\r\nexport const setSearchQuery = (query: string): SetSearchQueryAction => ({\r\n    type: FiltersActionsTypes.SET_SEARCH_QUERY,\r\n    payload: query,\r\n});\r\n\r\nexport const setFilters = (filters: string[]): SetFiltersAction => ({\r\n    type: FiltersActionsTypes.SET_FILTERS,\r\n    payload: filters,\r\n});\r\n\r\nexport const setSort = (sort: string): SetSortAction => ({\r\n    type: FiltersActionsTypes.SET_SORT,\r\n    payload: sort,\r\n});\r\n\r\nexport const resetFilters = (): ResetFiltersAction => ({\r\n    type: FiltersActionsTypes.RESET_FILTERS,\r\n});","import { ThunkAction } from 'redux-thunk';\r\nimport { RootState } from '../reducers'; \r\nimport { \r\n    ArticleActions,\r\n    ArticlesActionsTypes,\r\n    IFetchArticlesRequestAction,\r\n    IFetchArticlesRequestSuccessAction,\r\n    IArticle,\r\n    IFetchArticlesRequestFailedAction,\r\n} from '../store/types/articles';\r\nimport { FilterActions } from '../store/types/filters';\r\nimport { resetFilters } from './filtersActions';\r\n\r\nexport interface IFetchArticlesResponse {\r\n    articles: IArticle[];\r\n}\r\n\r\nexport const fetchArticlesRequest = (tab: string): IFetchArticlesRequestAction => ({\r\n    type: ArticlesActionsTypes.FETCH_ARTICLES_REQUEST,\r\n    payload: tab,\r\n});\r\n\r\nexport const fetchArticlesRequestSuccess = (articles: IArticle[]): IFetchArticlesRequestSuccessAction => ({\r\n    type: ArticlesActionsTypes.FETCH_ARTICLES_REQUEST_SUCCESS,\r\n    payload: articles,\r\n});\r\n\r\nexport const fetchArticlesRequestFailure = (error: string): IFetchArticlesRequestFailedAction => ({\r\n    type: ArticlesActionsTypes.FETCH_ARTICLES_REQUEST_FAILED,\r\n    payload: error,\r\n});\r\n\r\nexport const fetchArticles = (tab: string): ThunkAction<void, RootState, void, ArticleActions | FilterActions> => {\r\n    return (dispatch, getState) => {\r\n        dispatch(fetchArticlesRequest(tab));\r\n        dispatch(resetFilters());\r\n\r\n        const page = Math.floor((Math.random() * 50) + 1);\r\n        const apiKey: string | undefined = process.env.REACT_APP_API_KEY;\r\n        const apiSource: string | undefined = process.env.REACT_APP_API_URL;\r\n\r\n        fetch(`${apiSource}?page=${page}&apiKey=${apiKey}&q=${tab}`).then(res => res.json())\r\n            .then((data: IFetchArticlesResponse) => {\r\n                dispatch(fetchArticlesRequestSuccess(data.articles));\r\n            })\r\n            .catch(() => {\r\n                dispatch(fetchArticlesRequestFailure('Error'));\r\n            });\r\n    }\r\n}","import { connect } from 'react-redux';\r\nimport Tabs from '../../components/Tabs';\r\nimport { RootState } from '../../reducers';\r\nimport { fetchArticles } from '../../actions/articlesActions';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport { ArticleActions } from '../../store/types/articles';\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    activeTab: state.articles.activeTab,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: ThunkDispatch<RootState, undefined, ArticleActions>) => ({\r\n    onTabChange: (tab: string) => dispatch(fetchArticles(tab)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Tabs);","export interface TabInterface {\r\n    id: string;\r\n    title: string;\r\n}\r\n\r\nconst tabs: TabInterface[] = [\r\n    {\r\n        id: '0',\r\n        title: 'World',\r\n    },\r\n    {\r\n        id: '1',\r\n        title: 'People',\r\n    },\r\n    {\r\n        id: '2',\r\n        title: 'Sport',\r\n    },\r\n    {\r\n        id: '3',\r\n        title: 'Games',\r\n    },\r\n];\r\n\r\nexport default tabs;","import styled from 'styled-components';\r\n\r\nexport interface ArticleLinkProps{\r\n    urlToImage: string;\r\n}\r\n\r\nconst ArticleLink = styled.a.attrs<ArticleLinkProps, any>(({ urlToImage }: ArticleLinkProps) => ({\r\n    style: {\r\n        backgroundImage: `url(${urlToImage})`,\r\n    },\r\n}))`\r\n    width: 100%;\r\n    color: white;\r\n    cursor: pointer;\r\n    background-position: center;\r\n    background-size: cover;\r\n    background-repeat: no-repeat;\r\n    text-decoration: none;\r\n`;\r\n\r\nexport default ArticleLink;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport ArticleLink from './ArticleLink';\r\n\r\nconst ArticleContent = styled.div`\r\n    background-color: rgba(0, 0, 0, 0.7);\r\n    min-height: 200px;\r\n    padding: 30px;\r\n    transition: all ease .2s;\r\n\r\n    &:hover {\r\n        background-color: rgba(0,0,0,0.5);\r\n    }\r\n`;\r\n\r\nconst ArticleTitle = styled.h1`\r\n    margin: 0px;\r\n`;\r\n\r\nconst ArticleDescription = styled.div`\r\n    margin: 0px;\r\n`;\r\n\r\nexport interface ArticleProps {\r\n    title: string;\r\n    urlToImage: string;\r\n    description: string;\r\n    url: string;\r\n}\r\n\r\nconst Article: React.SFC<ArticleProps> = props => {\r\n    const { title, urlToImage, description, url } = props;\r\n\r\n    return (\r\n        <ArticleLink urlToImage={urlToImage} href={url}>\r\n            <ArticleContent>\r\n                <ArticleTitle>{title}</ArticleTitle>\r\n                <ArticleDescription>{description}</ArticleDescription>\r\n            </ArticleContent>\r\n        </ArticleLink>\r\n    );\r\n}\r\n\r\nexport default Article;","import React from 'react';\r\nimport styled, { keyframes } from 'styled-components';\r\n\r\nconst RotatePlane = keyframes`\r\n    0% { \r\n        transform: perspective(120px) rotateX(0deg) rotateY(0deg);\r\n        -webkit-transform: perspective(120px) rotateX(0deg) rotateY(0deg) \r\n    } 50% { \r\n        transform: perspective(120px) rotateX(-180.1deg) rotateY(0deg);\r\n        -webkit-transform: perspective(120px) rotateX(-180.1deg) rotateY(0deg) \r\n    } 100% { \r\n        transform: perspective(120px) rotateX(-180deg) rotateY(-179.9deg);\r\n        -webkit-transform: perspective(120px) rotateX(-180deg) rotateY(-179.9deg);\r\n    }\r\n`;\r\n\r\nconst Spinner = styled.div`\r\n    width: 40px;\r\n    height: 40px;\r\n    background-color: black;\r\n    margin: 100px auto;\r\n    -webkit-animation: ${RotatePlane} 1.2s infinite ease-in-out;\r\n    animation: ${RotatePlane} 1.2s infinite ease-in-out;\r\n`;\r\n\r\nconst Loader: React.SFC<{}> = () => {\r\n    return <Spinner></Spinner>\r\n}\r\n\r\nexport default Loader;","interface Config {\r\n    defaultUrlToImage: string;\r\n    defaultErrorMessage: string;\r\n}\r\n\r\nconst config: Config = {\r\n    defaultUrlToImage: 'https://upload.wikimedia.org/wikipedia/commons/thumb/a/ac/No_image_available.svg/1024px-No_image_available.svg.png',\r\n    defaultErrorMessage: 'Error while fetching data. Please try again!',\r\n};\r\n\r\nexport default config;","import React, { ChangeEvent } from 'react';\r\nimport { TextField } from '@material-ui/core';\r\n\r\ninterface ISearchBarProps {\r\n    value: string;\r\n    onSearchBarValueChange: (event: ChangeEvent<HTMLInputElement>) => void;\r\n}\r\n\r\nconst SeachBar = ({ value, onSearchBarValueChange }: ISearchBarProps) => (\r\n    <TextField\r\n        label=\"Search\"\r\n        type=\"search\"\r\n        margin=\"normal\"\r\n        variant=\"outlined\"\r\n        value={value}\r\n        onChange={onSearchBarValueChange}\r\n        fullWidth\r\n    />\r\n);\r\n\r\nexport default SeachBar;","import React, { ChangeEvent } from 'react';\r\nimport Input from '@material-ui/core/Input';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nexport interface IFiltersSelectBar {\r\n    sources: string[],\r\n    values: string[],\r\n    onFiltersSelectBarChange: (event: ChangeEvent<HTMLSelectElement>) => void;\r\n}\r\n\r\nconst FiltersSelectBar = ({ sources, values, onFiltersSelectBarChange }: IFiltersSelectBar) => {\r\n    return (\r\n        <FormControl fullWidth>\r\n            <InputLabel htmlFor=\"filters\">Filters</InputLabel>\r\n            <Select\r\n                    multiple\r\n                    value={values}\r\n                    onChange={onFiltersSelectBarChange}\r\n                    input={<Input id=\"filters\" />}\r\n            >\r\n                {sources.map(source => (\r\n                    <MenuItem key={source} value={source} >\r\n                        {source}\r\n                    </MenuItem>\r\n                ))}\r\n            </Select>\r\n        </FormControl>\r\n    );\r\n}\r\n\r\nexport default FiltersSelectBar;","import React, { MouseEvent } from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface ISortButtonProps {\r\n    selected: boolean;\r\n}\r\n\r\nconst BottomNavigation = styled.div`\r\n    display: flex;\r\n`;\r\n\r\nconst SortButton = styled.div<ISortButtonProps>`\r\n    width: 50%;\r\n    margin: 10px;\r\n    background: ${ props => props.selected ? '#491253' : 'black'};\r\n    border-radius: 20px;\r\n    color: white;\r\n    box-shadow: 0 0 10px black;\r\n    cursor: pointer;\r\n    user-select: none;\r\n\r\n    &:hover {\r\n        background: ${ props => props.selected ? '#712d7d' : 'green'};\r\n    }\r\n`\r\n\r\ninterface ISortBarProps {\r\n    value: string;\r\n    changeSort: (event: MouseEvent) => void;\r\n}\r\n\r\nconst SortBar = ({ value, changeSort }: ISortBarProps) => (\r\n    <BottomNavigation>\r\n        <SortButton selected={value === 'Asc'} onClick={changeSort}>\r\n            Asc\r\n        </SortButton>\r\n        <SortButton selected={value === 'Desc'} onClick={changeSort}>\r\n            Desc\r\n        </SortButton>\r\n    </BottomNavigation>\r\n);\r\n\r\nexport default SortBar;","import React, { Component, ReactNode, MouseEvent, ChangeEvent } from 'react';\r\nimport styled from 'styled-components';\r\nimport SeachBar from './SearchBar';\r\nimport FiltersSelectBar from './FiltersSelectBar/FiltersSelectBar';\r\nimport SortBar from './SortBar';\r\nimport { Button } from '@material-ui/core';\r\n\r\nconst Container = styled.div`\r\n    padding: 20px;\r\n`;\r\n\r\nexport interface IFiltersBarProps {\r\n    searchQuery: string;\r\n    filters: string[];\r\n    filterValues: string[];\r\n    sort: string;\r\n    setSearchQuery: (query: string) => void;\r\n    setFilters: (filters: string[]) => void;\r\n    setSort: (sort: string) => void;\r\n}\r\n\r\nexport interface IFiltersBarState {\r\n    isVisible: boolean;\r\n}\r\n\r\nclass FiltersBar extends Component<IFiltersBarProps, IFiltersBarState> {\r\n    state = {\r\n        isVisible: false,\r\n    }\r\n\r\n    onSearchBarValueChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        this.props.setSearchQuery(event.target.value);\r\n    }\r\n\r\n    onFiltersSelectBarChange = (event: ChangeEvent<HTMLSelectElement>) => {\r\n        //Workaround to issue https://github.com/mui-org/material-ui/issues/13782\r\n        this.props.setFilters(event.target.value as any);\r\n    }\r\n\r\n    onSortBarValueChange = (event: MouseEvent) => {\r\n        const sortValue = event.currentTarget.textContent || 'Asc';\r\n        \r\n        this.props.setSort(sortValue === this.props.sort ? '' : sortValue);\r\n    }\r\n\r\n    onButtonVisibleClick = () => {\r\n        this.setState((state) => ({\r\n            isVisible: !state.isVisible,\r\n        }));\r\n    }\r\n\r\n    render(): ReactNode {\r\n        const { searchQuery, filterValues, filters, sort } = this.props;\r\n\r\n        return (\r\n            <React.Fragment>\r\n                {this.state.isVisible && (\r\n                    <Container>\r\n                        <FiltersSelectBar onFiltersSelectBarChange={this.onFiltersSelectBarChange} values={filterValues} sources={filters} />\r\n                        <SeachBar value={searchQuery} onSearchBarValueChange={this.onSearchBarValueChange} />\r\n                        <SortBar value={sort} changeSort={this.onSortBarValueChange} />\r\n                    </Container>\r\n                )}\r\n                <Button onClick={this.onButtonVisibleClick} >\r\n                    {this.state.isVisible ? 'Hide filters' : 'Show filters'}\r\n                </Button>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FiltersBar;","import { createSelector } from 'reselect';\r\nimport { RootState } from \"../reducers\";\r\nimport { IArticle } from '../store/types/articles';\r\n\r\nconst articlesSelector = (state: RootState) => state.articles.data;\r\n\r\nexport default createSelector(\r\n    articlesSelector,\r\n    (articles: IArticle[]): string[] => {\r\n        const sources = articles.map(article => article.source.name);\r\n\r\n        return [...new Set(sources)];\r\n    }\r\n);","import { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport FiltersBar from '../../components/FiltersBar';\r\nimport { RootState } from '../../reducers';\r\nimport { setSearchQuery, setFilters, setSort } from '../../actions/filtersActions';\r\nimport getFilters from '../../selectors/getFilters';\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    searchQuery: state.filters.search,\r\n    filterValues: state.filters.filters,\r\n    sort: state.filters.sort,\r\n    filters: getFilters(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    setSearchQuery: (query: string) => dispatch(setSearchQuery(query)),\r\n    setFilters: (filters: string[]) => dispatch(setFilters(filters)),\r\n    setSort: (sort: string) => dispatch(setSort(sort)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FiltersBar);","import React, { ReactNode } from 'react';\r\nimport styled from 'styled-components';\r\nimport Article from './Article';\r\nimport Loader from '../Loader';\r\nimport config from '../../constants/config';\r\nimport { IArticle } from '../../store/types/articles';\r\nimport FiltersBarContainer from '../../containers/FiltersBarContainer';\r\n\r\nexport interface ArticleListPropTypes {\r\n    articles: IArticle[];\r\n    error: string;\r\n    isFetching: boolean;\r\n    activeTab: string;\r\n}\r\n\r\nconst Error = styled.div`\r\n    color: red;\r\n`;\r\n\r\nconst HighLight = styled.b`\r\n    color: #491253;\r\n`;\r\n\r\nconst renderContent = ({ articles, isFetching, error, activeTab }: ArticleListPropTypes) => {\r\n    if (isFetching) {\r\n        return <Loader />\r\n    }\r\n\r\n    if (error) {\r\n        <Error>{error}</Error>\r\n    }\r\n\r\n    if (!activeTab) {\r\n        return (\r\n            <div>\r\n                Please, select any Tab to display <HighLight>20</HighLight> random articles of chosen category\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <FiltersBarContainer />\r\n            {articles.map((article: IArticle): ReactNode => ( \r\n                <Article\r\n                    key={article.title}\r\n                    title={article.title} \r\n                    description={article.description}\r\n                    url={article.url}\r\n                    urlToImage={article.urlToImage || config.defaultUrlToImage}\r\n                />\r\n            ))}\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nconst ArticleList = (props: ArticleListPropTypes) => (\r\n    renderContent(props)\r\n)\r\n\r\nexport default ArticleList;","import { createSelector } from 'reselect';\r\nimport { RootState } from \"../reducers\";\r\nimport { IArticle } from \"../store/types/articles\";\r\n\r\nconst getFilteredArticles = (state: RootState): IArticle[] => {\r\n    const query = state.filters.search;\r\n    const filters = state.filters.filters;\r\n    const sort = state.filters.sort;\r\n    let articles = state.articles.data;\r\n\r\n    if (filters.length) {\r\n        articles = state.articles.data.filter(article => {\r\n            return filters.includes(article.source.name);\r\n        });\r\n    }\r\n\r\n    articles = articles.filter((article) => article.title.includes(query) || article.description.includes(query));\r\n\r\n    if (!sort) {\r\n        return articles;\r\n    }\r\n\r\n    const sortedArray = articles.sort((firstArticle, secondArticle) => {\r\n        return firstArticle.title.localeCompare(secondArticle.title);\r\n    });\r\n\r\n    if (sort === 'Asc') {\r\n        return sortedArray;\r\n    }\r\n\r\n    return sortedArray.reverse();\r\n}\r\n\r\nexport default getFilteredArticles;","import { connect } from 'react-redux';\r\nimport ArticlesList from '../../components/ArticleList';\r\nimport { RootState } from '../../reducers';\r\nimport getFilteredArticles from '../../selectors/getFilteredArticles';\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    articles: getFilteredArticles(state),\r\n    isFetching: state.articles.isFetching,\r\n    error: state.articles.error,\r\n    activeTab: state.articles.activeTab,\r\n});\r\n\r\nexport default connect(mapStateToProps)(ArticlesList);","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport ArticlesContainer from '../../containers/ArticlesContainer';\r\nimport FiltersBarContainer from '../../containers/FiltersBarContainer';\r\n\r\nconst ContentLayout = styled.div`\r\n    margin-left: 200px;\r\n    margin-right: 200px;\r\n    padding-top: 54px;\r\n    box-shadow: 0 0 20px black;\r\n    min-height: 400px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    text-align: center;\r\n\r\n    @media(max-width: 1020px) {\r\n        margin-left: 100px;\r\n        margin-right: 100px;\r\n    }\r\n    \r\n    @media(max-width: 750px) {\r\n        margin-left: 50px;\r\n        margin-right: 50px;\r\n        padding-top: 108px;\r\n    }\r\n    \r\n    @media(max-width: 520px) {\r\n        margin: 0px;\r\n        padding-top: 216px;\r\n    }\r\n`;\r\n\r\nconst ContentView = () => (\r\n    <ContentLayout>\r\n        <ArticlesContainer />\r\n    </ContentLayout>\r\n);\r\n\r\nexport default ContentView;","import React from 'react';\r\nimport ArticlesContainer from '../../containers/ArticlesContainer/ArticlesContainer';\r\nimport TabsContainer from '../../containers/TabsContainer/TabsContainer';\r\nimport tabs from '../../data/tabs';\r\nimport FiltersBarContainer from '../../containers/FiltersBarContainer';\r\nimport ContentView from '../ContentView';\r\n\r\nconst Screen = () => (\r\n    <React.Fragment>\r\n        <TabsContainer tabs={tabs} />\r\n        <ContentView />\r\n    </React.Fragment>\r\n);\r\n\r\nexport default Screen;","import { ArticlesActionsTypes, IArticlesState, ArticleActions } from '../store/types/articles';\r\n\r\nconst initialState = {\r\n    data: [],\r\n    activeTab: '',\r\n    error: '',\r\n    isFetching: false,\r\n};\r\n\r\nconst articlesReducer = (state: IArticlesState = initialState, action: ArticleActions): IArticlesState => {\r\n    switch (action.type) {\r\n        case ArticlesActionsTypes.FETCH_ARTICLES_REQUEST:\r\n            return { ...state, activeTab: action.payload, isFetching: true, error: '' };\r\n\r\n        case ArticlesActionsTypes.FETCH_ARTICLES_REQUEST_SUCCESS:\r\n            return { ...state, data: action.payload, isFetching: false };\r\n\r\n        case ArticlesActionsTypes.FETCH_ARTICLES_REQUEST_FAILED:\r\n            return { ...state, isFetching: false, error: action.payload };\r\n\r\n        default: \r\n            return state;\r\n    }\r\n}\r\n\r\nexport default articlesReducer;","import { IFiltersState, FilterActions, FiltersActionsTypes } from \"../store/types/filters\";\r\n\r\nconst initialState = {\r\n    sort: 'Asc',\r\n    search: '',\r\n    filters: [],\r\n}\r\n\r\nconst filtersReducer = (state: IFiltersState = initialState, action: FilterActions): IFiltersState => {\r\n    switch (action.type) {\r\n        case FiltersActionsTypes.SET_FILTERS:\r\n            return { ...state, filters: action.payload };\r\n\r\n        case FiltersActionsTypes.SET_SEARCH_QUERY:\r\n            return { ...state, search: action.payload };\r\n        \r\n        case FiltersActionsTypes.SET_SORT:\r\n            return { ...state, sort: action.payload };\r\n        \r\n        case FiltersActionsTypes.RESET_FILTERS:\r\n            return initialState;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default filtersReducer;","import { combineReducers } from 'redux';\r\nimport articlesReducer from './articlesReducer';\r\nimport filtersReducer from './filtersReducer';\r\nimport { IArticlesState } from '../store/types/articles';\r\nimport { IFiltersState } from '../store/types/filters';\r\n\r\nexport interface RootState {\r\n    articles: IArticlesState;\r\n    filters: IFiltersState;\r\n}\r\n\r\nconst rootReducer = combineReducers<RootState>({\r\n    articles: articlesReducer,\r\n    filters: filtersReducer,\r\n});\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware, Middleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport logger from 'redux-logger';\r\nimport rootReducer from '../reducers';\r\n\r\nconst middlewares: Middleware[] = [thunk];\r\n\r\nif (process.env.NODE_ENV === 'development') {\r\n    middlewares.push(logger);\r\n}\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(...middlewares));\r\n\r\nexport default store;","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { createGlobalStyle } from 'styled-components';\r\nimport Screen from '../Screen';\r\nimport store from '../../store';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n    * {\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    html {\r\n        height: 100%;\r\n    }\r\n\r\n    body {\r\n        min-height: 100%;\r\n        margin: 0px;\r\n        display: flex;\r\n        flex-direction: column;\r\n        flex-wrap: nowrap;\r\n        justify-content: flex-start;\r\n        align-items: center;\r\n        font-family: fantasy;\r\n    }\r\n\r\n    #root {\r\n        width: 100%;\r\n    }\r\n`;\r\n\r\nconst App: React.SFC<{}> = () => {\r\n    return (\r\n        <Provider store={store} >\r\n            <GlobalStyle />\r\n            <Screen />\r\n        </Provider>\r\n    );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}